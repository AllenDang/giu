// Code generated by "string2enum -samepkg -type=StyleColorID,StyleVarID -output=StyleIDs_string2enum.go -linecomment"; DO NOT EDIT.

package giu

import "fmt"

// StyleColorIDFromString returns the StyleColorID enum corresponding to s.
func StyleColorIDFromString(s string) StyleColorID {
	if len(s) == 0 {
		return 0
	}
	for i := range _StyleColorID_index[:len(_StyleColorID_index)-1] {
		if s == _StyleColorID_name[_StyleColorID_index[i]:_StyleColorID_index[i+1]] {
			return StyleColorID(i)
		}
	}
	panic(fmt.Errorf("unable to locate StyleColorID enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "StyleColorID".
	switch s {
	// 0
	case "color":
	// 1
	case "disabled-color":
	// 2
	case "background-color":
	// 3
	case "child-background-color":
	// 4
	case "popup-background-color":
	// 5
	case "border-color":
	// 6
	case "border-shadow-color":
	// 7
	case "frame-background-color":
	// 8
	case "frame-background-hovered-color":
	// 9
	case "frame-background-active-color":
	// 10
	case "title-background-color":
	// 11
	case "title-background-active-color":
	// 12
	case "title-background-collapsed-color":
	// 13
	case "menu-bar-background-color":
	// 14
	case "scrollbar-background-color":
	// 15
	case "scrollbar-grab-color":
	// 16
	case "scrollbar-grab-hovered-color":
	// 17
	case "scrollbar-grab-active-color":
	// 18
	case "checkmark-color":
	// 19
	case "slider-grab-color":
	// 20
	case "slider-grab-active-color":
	// 21
	case "button-color":
	// 22
	case "button-hovered-color":
	// 23
	case "button-active-color":
	// 24
	case "header-color":
	// 25
	case "header-hovered-color":
	// 26
	case "header-active-color":
	// 27
	case "separator-color":
	// 28
	case "separator-hovered-color":
	// 29
	case "separator-active-color":
	// 30
	case "resize-grip-color":
	// 31
	case "resize-grip-hovered-color":
	// 32
	case "resize-grip-active-color":
	// 33
	case "tab-color":
	// 34
	case "tab-hovered-color":
	// 35
	case "tab-active-color":
	// 36
	case "tab-unfocused-color":
	// 37
	case "tab-unfocused-active-color":
	// 38
	case "plot-lines-color":
	// 39
	case "plot-lines-hovered-color":
	// 40
	case "plot-histogram-color":
	// 41
	case "plot-histogram-hovered-color":
	// 42
	case "table-header-background-color":
	// 43
	case "table-border-strong-color":
	// 44
	case "table-border-light-color":
	// 45
	case "table-row-background-color":
	// 46
	case "table-row-alternate-background-color":
	// 47
	case "text-selected-background-color":
	// 48
	case "drag-drop-target-color":
	// 49
	case "navigation-highlight-color":
	// 50
	case "windowing-highlight-color":
	// 51
	case "windowing-dim-background-color":
	// 52
	case "modal-window-dim-background-color":
	}
}

// StyleVarIDFromString returns the StyleVarID enum corresponding to s.
func StyleVarIDFromString(s string) StyleVarID {
	if len(s) == 0 {
		return 0
	}
	for i := range _StyleVarID_index_0[:len(_StyleVarID_index_0)-1] {
		if s == _StyleVarID_name_0[_StyleVarID_index_0[i]:_StyleVarID_index_0[i+1]] {
			return StyleVarID(i + 0)
		}
	}
	for i := range _StyleVarID_index_1[:len(_StyleVarID_index_1)-1] {
		if s == _StyleVarID_name_1[_StyleVarID_index_1[i]:_StyleVarID_index_1[i+1]] {
			return StyleVarID(i + 18)
		}
	}
	panic(fmt.Errorf("unable to locate StyleVarID enum corresponding to %q", s))
}

func _(s string) {
	// Check for duplicate string values in type "StyleVarID".
	switch s {
	// 0
	case "alpha":
	// 1
	case "disabled-alpha":
	// 2
	case "window-padding":
	// 3
	case "window-rounding":
	// 4
	case "window-border-size":
	// 5
	case "window-min-size":
	// 6
	case "window-title-align":
	// 7
	case "child-rounding":
	// 8
	case "child-border-size":
	// 9
	case "popup-rounding":
	// 10
	case "popup-border-size":
	// 11
	case "frame-padding":
	// 12
	case "frame-rounding":
	// 13
	case "frame-border-size":
	// 14
	case "item-spacing":
	// 15
	case "item-inner-spacing":
	// 16
	case "indent-spacing":
	// 18
	case "scrollbar-size":
	// 19
	case "scrollbar-rounding":
	// 20
	case "grab-min-size":
	// 21
	case "grab-rounding":
	// 22
	case "tab-rounding":
	// 23
	case "button-text-align":
	// 24
	case "selectable-text-align":
	}
}
